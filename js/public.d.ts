import * as internals from './internals.js';
declare const _default: {
    constants: Readonly<{
        MUTED_CLASS: "component-muted";
        BYPASSED_CLASS: "component-bypassed";
        COMPONENT_CONTAINER_CLASS: "modular-container";
        KEYBOARD_KEY_CLASS: "keyboard-key";
        KEYBOARD_KEY_PRESSED_CLASS: "keyboard-key-pressed";
        BYPASS_INDICATOR_CLASS: "bypass-indicator";
        MONITOR_VALUE_CLASS: "monitor-value";
        MONITOR_OUT_OF_BOUNDS_CLASS: "monitor-out-of-bounds";
        UNINITIALIZED_CLASS: "component-uninitialized";
        BANG_CLASS: "bang";
        BANG_PRESSED_CLASS: "bang-pressed";
        MIDI_LEARN_LISTENING_CLASS: "midi-learn-listening";
        MIDI_LEARN_ASSIGNED_CLASS: "midi-learn-assigned";
        EVENT_AUDIOPROCESS: "audioprocess";
        EVENT_MOUSEDOWN: "mousedown";
        EVENT_MOUSEUP: "mouseup";
        TRIGGER: symbol;
        MIN_PLAYBACK_RATE: 0.0625;
        MAX_PLAYBACK_RATE: 16;
        MAX_CHANNELS: 32;
        DEFAULT_NUM_CHANNELS: 2;
        MAX_ANALYZER_LENGTH: 32768;
        UNSET_VALUE: undefined;
    }>;
    events: typeof internals.events;
    util: typeof internals.util;
    lazyProperty(initializer: (thisObj: any, propName?: string) => any): (target: any, prop: string) => void;
    resolvePromiseArgs<I extends any[], O>(obj: any, propName: string, descriptor: PropertyDescriptor): TypedPropertyDescriptor<((...args: internals.MaybePromises<I>) => internals.MaybePromise<O>) | ((...args: I) => O)>;
    ADSR: typeof internals.ADSR;
    AudioComponent: typeof internals.AudioComponent;
    AudioRecordingComponent: typeof internals.AudioRecordingComponent;
    AudioExecutionContext: typeof internals.AudioExecutionContext;
    WorkletExecutionContext: typeof internals.WorkletExecutionContext;
    ScriptProcessorExecutionContext: typeof internals.ScriptProcessorExecutionContext;
    AudioTransformComponent: typeof internals.AudioTransformComponent;
    AudioRateSignalSampler: typeof internals.AudioRateSignalSampler;
    Bang: typeof internals.Bang;
    BaseComponent: typeof internals.BaseComponent;
    VisualComponent: typeof internals.VisualComponent;
    BufferComponent: typeof internals.BufferComponent;
    BufferWriterComponent: typeof internals.BufferWriterComponent;
    ChannelSplitter: typeof internals.ChannelSplitter;
    ChannelStacker: typeof internals.ChannelStacker;
    ControlToAudioConverter: typeof internals.ControlToAudioConverter;
    FunctionComponent: typeof internals.FunctionComponent;
    FFTComponent: typeof internals.FFTComponent;
    IFFTComponent: typeof internals.IFFTComponent;
    BundleComponent: typeof internals.BundleComponent;
    IgnoreDuplicates: typeof internals.IgnoreDuplicates;
    Keyboard: typeof internals.Keyboard;
    MediaElementComponent: typeof internals.MediaElementComponent;
    DefaultDeviceBehavior: typeof internals.DefaultDeviceBehavior;
    MidiInputDevice: typeof internals.MidiInputDevice;
    RangeInputComponent: typeof internals.RangeInputComponent;
    ScrollingAudioMonitor: typeof internals.ScrollingAudioMonitor;
    SimplePolyphonicSynth: typeof internals.SimplePolyphonicSynth;
    SlowDown: typeof internals.SlowDown;
    TimeVaryingSignal: typeof internals.TimeVaryingSignal;
    TypingKeyboardMIDI: typeof internals.TypingKeyboardMIDI;
    Wave: typeof internals.Wave;
    AbstractInput: typeof internals.AbstractInput;
    AudioRateInput: typeof internals.AudioRateInput;
    CompoundInput: typeof internals.CompoundInput;
    ComponentInput: typeof internals.ComponentInput;
    ControlInput: typeof internals.ControlInput;
    FFTInput: typeof internals.FFTInput;
    AbstractOutput: typeof internals.AbstractOutput;
    AudioRateOutput: typeof internals.AudioRateOutput;
    CompoundOutput: typeof internals.CompoundOutput;
    ControlOutput: typeof internals.ControlOutput;
    FFTOutput: typeof internals.FFTOutput;
    BaseAudioPort: typeof internals.BaseAudioPort;
    NodeOutputPort: typeof internals.NodeOutputPort;
    NodeInputPort: typeof internals.NodeInputPort;
    BaseConnectable: typeof internals.BaseConnectable;
    ToStringAndUUID: typeof internals.ToStringAndUUID;
    TypedConfigurable: typeof internals.TypedConfigurable;
    MidiAccessListener: typeof internals.MidiAccessListener;
    MidiMessageListener: typeof internals.MidiMessageListener;
    MidiLearn: typeof internals.MidiLearn;
    getNumInputChannels(node: internals.WebAudioConnectable): any;
    getNumOutputChannels(node: internals.WebAudioConnectable): any;
    createMultiChannelView<T extends internals.MultiChannel>(multiChannelIO: T, supportsMultichannel: boolean): import("./worklet/lib/types.js").MultiChannelArray<T>;
    connectWebAudioChannels(audioContext: AudioContext, source: AudioNode, destination: internals.WebAudioConnectable, fromChannel?: number | undefined, toChannel?: number | undefined): void | AudioNode;
    BaseEvent: typeof internals.BaseEvent;
    BypassEvent: typeof internals.BypassEvent;
    MuteEvent: typeof internals.MuteEvent;
    KeyEventType: typeof internals.KeyEventType;
    KeyEvent: typeof internals.KeyEvent;
    SignalLogger: typeof internals.SignalLogger;
    Disconnect: typeof internals.Disconnect;
    disconnect: () => never;
    WaveType: typeof internals.WaveType;
    RangeType: typeof internals.RangeType;
    TimeMeasure: typeof internals.TimeMeasure;
    BangDisplay: typeof internals.BangDisplay;
    BaseDisplay: typeof internals.BaseDisplay;
    KeyboardDisplay: typeof internals.KeyboardDisplay;
    RangeInputDisplay: typeof internals.RangeInputDisplay;
    KnobDisplay: typeof internals.KnobDisplay;
    SliderDisplay: typeof internals.SliderDisplay;
    ScrollingAudioMonitorDisplay: typeof internals.ScrollingAudioMonitorDisplay;
};
export default _default;
