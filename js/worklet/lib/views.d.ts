export interface WritableArrayLike<T> {
    readonly length: number;
    [n: number]: T;
    [Symbol.iterator]?(): Iterator<T>;
}
export declare class ArrayView<T> implements WritableArrayLike<T>, Array<T> {
    protected get: (i: number) => T;
    protected set: (i: number, v: T) => void;
    length: number;
    protected static PRIVATE_CONSTRUCTOR: symbol;
    [n: number]: T;
    private _proxy;
    protected get proxy(): this;
    protected constructor(privateConstructor: Symbol, get: (i: number) => T, set: (i: number, v: T) => void, length: number);
    findLast<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S | undefined;
    findLast(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T | undefined;
    findLastIndex(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): number;
    toReversed(): T[];
    toSorted(compareFn?: ((a: T, b: T) => number) | undefined): T[];
    toSpliced(start: number, deleteCount: number, ...items: T[]): T[];
    toSpliced(start: number, deleteCount?: number): T[];
    with(index: number, value: T): T[];
    at(index: number): T | undefined;
    flatMap<U, This = undefined>(callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>, thisArg?: This): U[];
    flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
    toLocaleString(): string;
    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
    pop(): T | undefined;
    push(...items: T[]): number;
    concat(...items: ConcatArray<T>[]): T[];
    concat(...items: (T | ConcatArray<T>)[]): T[];
    join(separator?: string): string;
    reverse(): T[];
    shift(): T | undefined;
    slice(start?: number, end?: number): T[];
    sort(compareFn?: (a: T, b: T) => number): this;
    splice(start: number, deleteCount?: number): T[];
    splice(start: number, deleteCount: number, ...items: T[]): T[];
    unshift(...items: T[]): number;
    indexOf(searchElement: T, fromIndex?: number): number;
    lastIndexOf(searchElement: T, fromIndex?: number): number;
    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];
    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];
    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
    find<S extends T>(predicate: (value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;
    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;
    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;
    fill(value: T, start?: number, end?: number): this;
    copyWithin(target: number, start: number, end?: number): this;
    entries(): IterableIterator<[number, T]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<T>;
    includes(searchElement: T, fromIndex?: number): boolean;
    [Symbol.iterator](): IterableIterator<T>;
    [Symbol.unscopables]: any;
    toString(): string;
    toArray(): T[];
    static create<T>(get: (i: number) => T, set: (i: number, v: T) => void, length: number): ArrayView<T>;
    protected static createFromDataLocationFn<T>(getDataLocation: (i: number) => {
        array: WritableArrayLike<T>;
        index: number;
    }, length: number): ArrayView<T>;
    static createConcatView<T>(...arrays: WritableArrayLike<T>[]): ArrayView<T>;
    static createSliceView<T>(array: WritableArrayLike<T>, startIndex?: number, endIndex?: number): ArrayView<T>;
    static createReindexedView<T>(array: WritableArrayLike<T>, indices: number[]): ArrayView<T>;
    static createInterleavedView<T>(...arrays: WritableArrayLike<T>[]): ArrayView<T>;
    static createDeinterleavedViews<T>(array: WritableArrayLike<T>, numViews: number): ArrayView<T>[];
    static createReversedView<T>(array: WritableArrayLike<T>): ArrayView<T>;
}
